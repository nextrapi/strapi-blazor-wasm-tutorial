@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@inject IHttpClientFactory ClientFactory
@inject AppServices.TasksApi Tasks

<CascadingValue Value="this">
    <!-- Modal -->
    @if (IsOpen)
    {
        @if (Backdrop)
        {
            <div class="modal-backdrop fade show"></div>
        }
        <div class="modal fade show d-block" id="exampleModal" tabindex="-1" role="dialog"
        aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="exampleModalLabel">Delete Task #@TaskId</h5>
                        <button @onclick="Trigger" type="button" class="close btn  btn-sm btn-outline-primary"
                        data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        Are you sure that you want to delete this task? This action can not be reversed.
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal"
                        @onclick="Trigger">Close</button>
                        <button @onclick="Delete" type="button" class="btn btn-danger">Delete Forever</button>
                    </div>
                </div>
            </div>
        </div>
    }

    @ChildContent
</CascadingValue>

@code {
    [CascadingParameter]
    Toast? Toast { get; set; }
    [Parameter]
    public RenderFragment? ChildContent { get; set; }
    [Parameter] public bool Backdrop { get; set; } = true;
    [CascadingParameter]
    public AppState? AppState { get; set; }
    public bool IsOpen { get; private set; } = false;

    private int? TaskId { get; set; }
    public void Trigger()
    {
        this.IsOpen = false;
        StateHasChanged();
    }
    protected Func<Task>? PostDeleteFunction;
    public void Trigger(int TaskToDeleteId, Func<Task>? TaskFunction = null)
    {
        this.TaskId = TaskToDeleteId;
        this.PostDeleteFunction = TaskFunction;
        this.IsOpen = true;
        StateHasChanged();
    }
    public async Task Delete()
    {
        if (this.TaskId != null)
        {
            try
            {
                await Tasks.Delete(AppState!.GetToken(), TaskId.Value);
                if (PostDeleteFunction != null)
                {
                    await PostDeleteFunction();
                }
                Toast?.Set("success", "Task Succesfully Deleted!");
                Trigger();
            }
            catch (HttpRequestException e)
            {

                Toast?.Set("danger", e.ToString());
            }
        }
    }
}
